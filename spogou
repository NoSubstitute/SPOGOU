/** 
Use this sheet as a template, never run the actual code in this sheet
As this is your original, you will "lose" control if you run the share process and give access to someone else

Instead, start with making a copy of the entire Spreadsheet and run the menu from the copy

All of this was to create a base for updating the users' passwords with a GAM script (Now I'm doing it all with GAS :-)
/home/User/gamadv-xtd3/gam csv gsheet MyUser $1 $2 gam update user ~primaryEmail password "~Password" changepassword $3
When I run that script I provide the fileID and sheetName and whether I want the kids to change their password or not (true/false)

Here's how you use these functons

Run "Prepare sheets"
Type your domain in A2 and group address in B2 of first sheet "Indata"
Type teacher's email in D2, and whether passwords need to be changed immediately or not (true/false)
and then run "Print list of users in Group" to get group members in sheet Group

"Prepare Passwords" will then run several functions in one command
    "Print list of users' names in Users" will list users with their full names in sheet Users
    "Format sheet" will insert a password column, with passwords based on the user's first name and a handful of numbers
The user then gets a chance to take a look at the prepared passwords, to see if some need manual fixing

"Set passwords" will of course push the provided passwords, but also run the last two functions, 
so it looks nice and the right person gets access to the list of credentials

    "Share sheet" will share the sheet with the teacher you provided in the beginning
    "Clean Up" will remove all sheets but 'Users'

After giving away the sheet to someone else, remove the entire apps script by entering Tools / Script Editor,
Open File menu and click Remove project

Still searching to see if that can be automated in some way

Future development is turning the final sheet into a printable doc with each user's data in sticker format
*/

function prepareSheets() {
  // Get User/Operator email address
  var userEmail = Session.getActiveUser().getEmail()
  // Crop the domain adress from the user's email address, so we can insert that later
  var domainIndata = userEmail.split('@').pop()
  // Creating the Indata sheet
  var spreadsheet = SpreadsheetApp.getActive();
  var sheet = spreadsheet.insertSheet();
  // Naming the sheet so I know how to reference it later
  sheet.setName("Indata");
  SpreadsheetApp.setActiveSheet(spreadsheet.getSheetByName("Indata"));
  spreadsheet.getRange('A2').activate();
  
  // Insert headers that can be used in later functions
  var header = ['Domain', 'Group Email', 'Teacher Email', 'Change Password true/false'];
  spreadsheet.appendRow(header).setFrozenRows(1);
    
  // Remove rows after 2
//  var spreadsheet = SpreadsheetApp.getActive();// Already have the active spreadsheet
  var maxRows = spreadsheet.getActiveSheet().getMaxRows(); 
  spreadsheet.getActiveSheet().deleteRows(3, maxRows-2);
  
  // Remove empty columns
//  var spreadsheet = SpreadsheetApp.getActive();// Already have the active spreadsheet
  var maxColumns = spreadsheet.getActiveSheet().getMaxColumns(); 
  var lastColumn = spreadsheet.getActiveSheet().getLastColumn();
  spreadsheet.getActiveSheet().deleteColumns(lastColumn+1, maxColumns-lastColumn); 

  // Prefill the necessary data in Indata
  spreadsheet.getRange('A2').setValue(domainIndata).setShowHyperlink(false);
  spreadsheet.getRange('B2').setValue("Replace with Group email").setShowHyperlink(false);
  spreadsheet.getRange('C2').setValue("Replace with teacher email").setShowHyperlink(false);
  spreadsheet.getRange('D2').setValue("FALSE");
  
    // Resizing columns
//  var spreadsheet = SpreadsheetApp.getActive();// Already have the active spreadsheet
//  sheet = spreadsheet.getActiveSheet();// Already have the active sheet
  var numColumns = spreadsheet.getActiveSheet().getMaxColumns();
  spreadsheet.getActiveSheet().autoResizeColumns(1, numColumns);

  for (var i=1; i<spreadsheet.getActiveSheet().getMaxColumns()+1; i++){
  var currentwidth = spreadsheet.getActiveSheet().getColumnWidth(i)
  spreadsheet.getActiveSheet().setColumnWidth (i, currentwidth+50)
  }

  // Creating the other sheets and naming them  
  var activeSpreadsheet1 = SpreadsheetApp.getActiveSpreadsheet();
  var newSheet1 = activeSpreadsheet1.insertSheet();
  newSheet1.setName("Group");
  var header1 = ['Group Name', 'User Id', 'User role', 'User Status'];
  newSheet1.appendRow(header1).setFrozenRows(1);
  
  var activeSpreadsheet2 = SpreadsheetApp.getActiveSpreadsheet();
  var newSheet2 = activeSpreadsheet2.insertSheet();
  newSheet2.setName("Users");
  var header2 = ['primaryEmail', 'FirstName', 'LastName'];
  newSheet2.appendRow(header2).setFrozenRows(1);
  
  var activeSpreadsheet3 = SpreadsheetApp.getActiveSpreadsheet();
  var newSheet3 = activeSpreadsheet3.insertSheet();
  newSheet3.setName("Log");
  
  // Send me back to first sheet, ready to receive user input
  var spreadsheet = SpreadsheetApp.getActive();
  SpreadsheetApp.setActiveSheet(spreadsheet.getSheetByName("Indata")); 
  spreadsheet.getRange('B2').activate();
}

function printUsersFromGroup() {
  // Get the current spreadsheet
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  SpreadsheetApp.setActiveSheet(ss.getSheetByName("Group"));// Switch view to the Group sheet
  var spreadsheet = SpreadsheetApp.getActive();
  spreadsheet.getRange('A2').activate();
  // Set the Indata sheet as the sheet we're working in
  var sheet = ss.getSheetByName("Indata");
  // Grab domain & group address from A2 & B2 on Indata
  var domain = sheet.getRange('A2').getValue();
  var groupKey = sheet.getRange('B2').getValue();
  // Grab group members and create the array
  var onSheet = SpreadsheetApp.getActiveSpreadsheet();
    var rows = [];
    var pageToken, page;
    do {
        page = AdminDirectory.Members.list(groupKey,
        {
            domainName: domain,
            maxResults: 500,
            pageToken: pageToken,
        });
        var members = page.members
        if (members)
        {
            for (var i = 0; i < members.length; i++)
            {
                var member = members[i];
                var row = [groupKey, member.email, member.role, member.status];
                rows.push(row);
            }
        }
        pageToken = page.nextPageToken;
    } while (pageToken);
    if (rows.length > 1)
    {
        // Print group members on second sheet called Group
        var sheetData = onSheet.getSheetByName("Group")
        var header = ['Group Name', 'User Id', 'User role', 'User Status'];
        sheetData.getRange(2, 1, rows.length, header.length).setValues(rows);
    }
  SpreadsheetApp.setActiveSheet(ss.getSheetByName('Group'));// Switch view to the Group sheet
  var spreadsheet = SpreadsheetApp.getActive();
  spreadsheet.getRange('A2').activate();
}

function getUserNames() {
  // Get the current spreadsheet
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  SpreadsheetApp.setActiveSheet(ss.getSheetByName("Users"));// send me to the Users sheet
  var spreadsheet = SpreadsheetApp.getActive();
  spreadsheet.getRange('A2').activate();
  // Set the active sheet be the one called Groups
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Group');
  // Log actions to the sheet called Users
  var logsheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Users');
  // Get all data from the second row to the last row with data, and the last column with data
  var lastrow = sheet.getLastRow();
  var lastcolumn = sheet.getLastColumn();
  var range = sheet.getRange(2,1,lastrow-1,lastcolumn);
  var list = range.getValues();
    for (var i=0; i<list.length; i++) {
      // Grab usernames from the second column (1) (first column is 0), then the rest from adjoining columns and set necessary variables
      var userinfo = list[i][1];      
          // For each line, try to get the user with given data, and log the result
            try {
                    var userdata = AdminDirectory.Users.get(userinfo);
                    var fname = userdata.name.givenName;
                    var lname = userdata.name.familyName;
              // Print the gathered info to the logsheet
              logsheet.appendRow([userinfo, fname, lname]);
              // If the update fails for some reason, log the error
            } catch (err) {
              logsheet.appendRow([userinfo, err]);
            }
        }
  SpreadsheetApp.setActiveSheet(ss.getSheetByName("Users"));// send me to the Users sheet
  var spreadsheet = SpreadsheetApp.getActive();
  spreadsheet.getRange('A2').activate();
}

function FormatAndCreateListOfStudentPasswords() {
  var spreadsheet = SpreadsheetApp.getActive();
  spreadsheet.setActiveSheet(spreadsheet.getSheetByName('Users'), true);
  var sheet = spreadsheet.getActiveSheet();
  
  // Adding an extra column here where passwords will end up
  sheet.getRange('A:A').activate();
  sheet.insertColumnsAfter(sheet.getActiveRange().getLastColumn(), 1);
  sheet.getActiveRange().offset(0, sheet.getActiveRange().getNumColumns(), sheet.getActiveRange().getNumRows(), 1).activate();
  sheet.getRange('B1').activate();
  sheet.getCurrentCell().setValue('PasswordTemp');
    
  // Splitting my familyName column I get Class as a separate column
  sheet.getRange('D1').activate();
  sheet.getCurrentCell().setValue('LastName');
  sheet.getRange('D:D').activate();
  sheet.getRange('D:D').splitTextToColumns(' - ');
  sheet.getRange('E1').activate();
  sheet.getCurrentCell().setValue('Class');
  sheet.getRange('F1').activate();
  sheet.getCurrentCell().setValue('PreparePass');
  
  // Now it's time to create the simple passwords Based off firstNames in C and four random numbers
  // Included a length check of names in C; if too short (passwords must be 8+ characters) repeat firstName
  // Put the temp passwords in column F
  sheet.getRange('F2').activate();
  sheet.getCurrentCell().setFormula('=IFS(LEN(C2) > 3;C2 & RANDBETWEEN(1111;9999);LEN(C2) > 2;C2 & RANDBETWEEN(11111;99999);LEN(C2) > 1;C2 & C2 & RANDBETWEEN(1111;9999))');
  sheet.getActiveRange().autoFillToNeighbor(SpreadsheetApp.AutoFillSeries.DEFAULT_SERIES);
  
  // I NEED A DELAY HERE! The previous auto-fill command is slow
  // A flush makes sure previous code is done. https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app#flush
  SpreadsheetApp.flush();
  
  // Copying those temp passwords from F to F, but only values, and not formulas
  sheet.getRange('F1').activate();
  sheet.getRange('F:F').copyTo(sheet.getActiveRange(), SpreadsheetApp.CopyPasteType.PASTE_VALUES, false);
  
  // I NEED A DELAY HERE! The previous auto-fill command is slow
  // A flush makes sure previous code is done. https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app#flush
  SpreadsheetApp.flush();
  
  // Removing characters that can't be used in passwords
  // Grab data from column F and put in column B
  sheet.getRange('B2').activate();
  sheet.getCurrentCell().setFormula('=SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(F2;"å";"a");"ä";"a");"ö";"o");"Å";"A");"Ä";"A");"Ö";"O");"é";"e");"Ü";"u");"ü";"u");"";"-");"ë";"e");"è";"e");"Ø";"O");"ø";"o");"õ";"o");"ó";"o");"€";"€");"€";"€")');
  sheet.getActiveRange().autoFillToNeighbor(SpreadsheetApp.AutoFillSeries.DEFAULT_SERIES);
  
  // I NEED A DELAY HERE! The previous auto-fill command is slow
  // A flush makes sure previous code is done. https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app#flush
  SpreadsheetApp.flush();
  
  // Copying those clean passwords from B to B, but only values, and not formulas
  var spreadsheet = SpreadsheetApp.getActive();
  spreadsheet.setActiveSheet(spreadsheet.getSheetByName('Users'), true);
  var sheet = spreadsheet.getActiveSheet();
  sheet.getRange('B1').activate();
  sheet.getRange('B:B').copyTo(sheet.getActiveRange(), SpreadsheetApp.CopyPasteType.PASTE_VALUES, false);
  
  // Deleting the PreparePass column F
  var spreadsheet = SpreadsheetApp.getActive();
  spreadsheet.setActiveSheet(spreadsheet.getSheetByName('Users'), true);
  var sheet = spreadsheet.getActiveSheet();
  sheet.getRange('F:F').activate();
  sheet.deleteColumns(sheet.getActiveRange().getColumn(), sheet.getActiveRange().getNumColumns());
  
  // Naming the B column to Password, as that's what it needs to be when I'm finished
  sheet.getRange('B1').activate();
  sheet.getCurrentCell().setValue('Password');
  
  // Deleting empty columns
  var spreadsheet = SpreadsheetApp.getActive();
  var maxColumns = spreadsheet.getActiveSheet().getMaxColumns(); 
  var lastColumn = spreadsheet.getActiveSheet().getLastColumn();
  spreadsheet.getActiveSheet().deleteColumns(lastColumn+1, maxColumns-lastColumn); 

  // Remove empty rows
  var spreadsheet = SpreadsheetApp.getActive();
  var maxRows = spreadsheet.getActiveSheet().getMaxRows(); 
  var lastRow = spreadsheet.getActiveSheet().getLastRow();
  spreadsheet.getActiveSheet().deleteRows(lastRow+1, maxRows-lastRow);

  // Tidying up

  // Adding filters
  var spreadsheet = SpreadsheetApp.getActive();
  var sheet = spreadsheet.getActiveSheet();
  sheet.getRange(1, 1, sheet.getMaxRows(), sheet.getMaxColumns()).activate();
  sheet = spreadsheet.getActiveSheet();
  sheet.getRange(1, 1, sheet.getMaxRows(), sheet.getMaxColumns()).createFilter();
  sheet.getRange('A1').activate();
  //sheet.setFrozenRows(1); // Already done in the prepare sheets function
  
  // Resizing columns
  var spreadsheet = SpreadsheetApp.getActive();
  sheet = spreadsheet.getActiveSheet();
  spreadsheet.getActiveSheet().autoResizeColumns(1, 5);
  for (var i=1; i<spreadsheet.getActiveSheet().getMaxColumns()+1; i++){
  var currentwidth = spreadsheet.getActiveSheet().getColumnWidth(i)
  spreadsheet.getActiveSheet().setColumnWidth (i, currentwidth+20)};
  
  SpreadsheetApp.getActiveSpreadsheet().moveActiveSheet(2);
}

function setPasswords() {
  // Get User/Operator Info
  var userEmail = Session.getActiveUser().getEmail()
  // Get the current spreadsheet
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  // Set the Users sheet as the sheet we're working in
  var sheet = ss.getSheetByName("Users");
  // Log actions to the Log sheet
  var logsheet = ss.getSheetByName('Log')
  // Grab true/false for chpass from Indata sheet D2
  var sheetData = ss.getSheetByName("Indata")
  var chpass = sheetData.getRange('D2').getValue();
  // Get all data from the second row to the last row with data, and the last column with data
  var lastrow = sheet.getLastRow();
  var lastcolumn = sheet.getLastColumn();
  var range = sheet.getRange(2,1,lastrow-1,lastcolumn);
  var list = range.getValues();
    for (var i=0; i<list.length; i++) {
      // Grab username from the first column (0), then the rest from adjoing columns and set necessary variables
      var email = list[i][0].toString();
      var pass = list[i][1].toString();
          // For each line, try to update the user with given data, and log the result.
            try {
              var updateuser = AdminDirectory.Users.update({password:pass, changePasswordAtNextLogin:chpass},email);
              logsheet.appendRow([new Date(), userEmail, "Password changed"+ " User: "+ email]);

              // If the update fails for some reason, log the error
            } catch (err) {
              logsheet.appendRow([email, err]);
            }
        }
}

function shareSheet() {
  var spreadsheet = SpreadsheetApp.getActive();
  // Get the teacher's email from Indata!C2, share sheet with user
  spreadsheet.setActiveSheet(spreadsheet.getSheetByName('Indata'), true);
  spreadsheet.getRange('C2').activate();
  var teacher = spreadsheet.getRange('C2').getValue();
  spreadsheet.addEditor(teacher);
}

// Re-activated this function so I can clean sheet after sharing with teacher
// Had previusly replaced it with with resetSheet above, so the same sheet can be re-used as a template again and again
// Do note that you still have to remove the script project manually, else the teacher will be able to run password changes again later
function cleanUp(){
  var spreadsheet = SpreadsheetApp.getActive();
  spreadsheet.setActiveSheet(spreadsheet.getSheetByName('Users'), true);
  var ss = SpreadsheetApp.getActiveSpreadsheet();  
  var sheets = ['Log','Group','Indata']; 
  var numberOfSheets = ss.getSheets().length;
  for(var s = numberOfSheets-1; s>0 ; s--){ // in my case I never delete the first sheet
    SpreadsheetApp.setActiveSheet(ss.getSheets()[s]);
    var shName = SpreadsheetApp.getActiveSheet().getName();
    if(sheets.indexOf(shName)>-1){
      var delSheet = ss.deleteActiveSheet();
      Utilities.sleep(500);
    }
  }
}

// Here I combine several functions into one, so the process is shorter for the user
function listUsersFormatPassword() {
  printUsersFromGroup();
  SpreadsheetApp.flush();
  getUserNames();
  SpreadsheetApp.flush();
  FormatAndCreateListOfStudentPasswords();
  SpreadsheetApp.flush();
}

// Once again I combine several functions into one, so the process is shorter for the user
function setPassShareClean() {
  setPasswords();
  SpreadsheetApp.flush();
  shareSheet();
  SpreadsheetApp.flush();
  cleanUp();
  SpreadsheetApp.flush();
}

// The onOpen function is executed automatically every time a Spreadsheet is loaded
function onOpen() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var menuEntries = [];
  // When the user clicks on "Set password..." then clicks one of the options, each function is executed
  // Here you can easily add more menu entries, if you add more functions/scripts
  // As you can see, I have disabled a few, as they are no longer needed as separate functions
  menuEntries.push({name: "Prepare sheets", functionName: "prepareSheets"});
  menuEntries.push(null); // line separator
  menuEntries.push({name: "Prepare passwords", functionName: "listUsersFormatPassword"});
  menuEntries.push(null); // line separator
  //menuEntries.push({name: "Print list of users in Group", functionName: "printUsersFromGroup"});
  //menuEntries.push(null); // line separator
  //menuEntries.push({name: "Print list of users' names in Users", functionName: "getUserNames"});
  //menuEntries.push(null); // line separator
  //menuEntries.push({name: "Format sheet", functionName: "FormatAndCreateListOfStudentPasswords"});
  //menuEntries.push(null); // line separator
  menuEntries.push({name: "Set passwords", functionName: "setPassShareClean"});
  //menuEntries.push(null); // line separator
  //menuEntries.push({name: "Set passwords", functionName: "setPasswords"});
  //menuEntries.push(null); // line separator
  //menuEntries.push({name: "Share sheet", functionName: "shareSheet"});
  //menuEntries.push(null); // line separator
  //menuEntries.push({name: "Clean up", functionName: "cleanUp"}); //Don't forget to remove the script project manually, else the teacher will be able to run password changes again later
  ss.addMenu("Set password on group of users", menuEntries);
}
  
/**
Last edit: 20200920-1930
Letting the Instructions sheet remain throughout the entire process
*/
